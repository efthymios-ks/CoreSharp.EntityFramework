using CoreSharp.EntityFramework.Entities;
using CoreSharp.EntityFramework.Entities.Interfaces;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.ChangeTracking;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;

namespace CoreSharp.EntityFramework.DbContexts.Abstracts
{
    public abstract class HistoryDbContextBase : DbContextBase
    {
        //Fields
        private EntityChangeEntry[] _changeEntries;

        //Constructors
        protected HistoryDbContextBase(DbContextOptions options)
            : base(options)
        {
        }

        protected HistoryDbContextBase()
        {
        }

        //Properties
        public DbSet<EntityChange> DataChanges { get; set; }

        //Methods 
        public override int SaveChanges()
        {
            OnBeforeSaveChanges();
            var count = base.SaveChanges();
            OnAfterSaveChangesAsync(default).GetAwaiter().GetResult();
            return count;
        }

        public override async Task<int> SaveChangesAsync(CancellationToken cancellationToken = default)
        {
            OnBeforeSaveChanges();
            var count = await base.SaveChangesAsync(cancellationToken);
            await OnAfterSaveChangesAsync(cancellationToken);
            return count;
        }

        private void OnBeforeSaveChanges()
        {
            ChangeTracker.DetectChanges();
            CacheChangesBeforeSave();
        }

        private async Task OnAfterSaveChangesAsync(CancellationToken cancellationToken)
        {
            UpdateChangesAfterSave();

            var changes = _changeEntries.Select(c => c.ToEntityChange());
            _changeEntries = null;

            await DataChanges.AddRangeAsync(changes, cancellationToken);
            await base.SaveChangesAsync(cancellationToken);
        }

        private void CacheChangesBeforeSave()
        {
            _changeEntries = Array.Empty<EntityChangeEntry>();

            static bool EntityEntryFilter(EntityEntry entry)
            {
                if (entry.Entity is EntityChange)
                    return false;
                else if (entry.Entity is not ITrackableEntity trackableEntity)
                    return false;
                else if (entry.State is EntityState.Unchanged or EntityState.Detached)
                    return false;

                return true;
            }

            var trackableEntries = ChangeTracker.Entries().Where(EntityEntryFilter);
            if (!trackableEntries.Any())
                return;

            //Scan entries 
            static bool PropertyEntryFilter(PropertyEntry entry)
            {
                var propertyName = entry.Metadata.Name;
                if (propertyName == nameof(ITrackableEntity.DateCreatedUtc))
                    return false;
                else if (propertyName == nameof(ITrackableEntity.DateModifiedUtc))
                    return false;

                return true;
            }

            var changes = new HashSet<EntityChangeEntry>();
            foreach (var trackableEntry in trackableEntries)
            {
                var change = new EntityChangeEntry(trackableEntry);

                //Scan properties 
                foreach (var property in trackableEntry.Properties.Where(PropertyEntryFilter))
                {
                    var propertyName = property.Metadata.Name;

                    //Value will be generated by the database, get the value after saving. 
                    if (property.IsTemporary)
                    {
                        change.TemporaryProperties.Add(property);
                        continue;
                    }

                    //Primary keys
                    if (property.Metadata.IsPrimaryKey())
                    {
                        change.Keys[propertyName] = property.CurrentValue;
                        continue;
                    }

                    //Properties 
                    switch (trackableEntry.State)
                    {
                        case EntityState.Added:
                            change.NewState[propertyName] = property.CurrentValue;
                            break;
                        case EntityState.Deleted:
                            change.PreviousState[propertyName] = property.OriginalValue;
                            break;
                        case EntityState.Modified when property.IsModified:
                            change.PreviousState[propertyName] = property.OriginalValue;
                            change.NewState[propertyName] = property.CurrentValue;
                            break;
                    }
                }

                changes.Add(change);
            }

            _changeEntries = changes.ToArray();
        }

        private void UpdateChangesAfterSave()
        {
            if (_changeEntries == null)
                return;

            var temporaryEntries = _changeEntries.Where(c => c.TemporaryProperties.Count > 0);
            foreach (var changeEntry in temporaryEntries)
            {
                //Get the final value of the temporary properties
                foreach (var property in changeEntry.TemporaryProperties.ToArray())
                {
                    var propertyName = property.Metadata.Name;
                    var propertyValue = property.CurrentValue;

                    if (property.Metadata.IsPrimaryKey())
                        changeEntry.Keys[propertyName] = propertyValue;
                    else
                        changeEntry.NewState[propertyName] = propertyValue;

                    changeEntry.TemporaryProperties.Remove(property);
                }
            }
        }
    }
}
