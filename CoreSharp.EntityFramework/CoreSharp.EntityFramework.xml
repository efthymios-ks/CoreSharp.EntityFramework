<?xml version="1.0"?>
<doc>
    <assembly>
        <name>CoreSharp.EntityFramework</name>
    </assembly>
    <members>
        <member name="T:CoreSharp.EntityFramework.Extensions.DbContextExtensions">
            <summary>
            <see cref="T:Microsoft.EntityFrameworkCore.DbContext"/> extensions.
            </summary>
        </member>
        <member name="M:CoreSharp.EntityFramework.Extensions.DbContextExtensions.RollbackAsync(Microsoft.EntityFrameworkCore.DbContext,System.Threading.CancellationToken)">
            <summary>
            Rolls back and erases all data
            modifications made in active transaction.
            </summary>
        </member>
        <member name="T:CoreSharp.EntityFramework.Extensions.EntityTypeBuilderExtensions">
            <summary>
            <see cref="T:Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder`1"/> extensions.
            </summary>
        </member>
        <member name="M:CoreSharp.EntityFramework.Extensions.EntityTypeBuilderExtensions.HasEnum``2(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            One-to-many relation with an <see cref="T:System.Enum"/>.
            The <see cref="T:System.Enum"/> must be first configured in <see cref="M:Microsoft.EntityFrameworkCore.DbContext.OnModelCreating(Microsoft.EntityFrameworkCore.ModelBuilder)"/>
            by calling <see cref="M:CoreSharp.EntityFramework.Extensions.ModelBuilderExtensions.HasEnum``1(Microsoft.EntityFrameworkCore.ModelBuilder,System.String)"/>.
            </summary>
        </member>
        <member name="M:CoreSharp.EntityFramework.Extensions.EntityTypeBuilderExtensions.HasEnums``2(Microsoft.EntityFrameworkCore.Metadata.Builders.EntityTypeBuilder{``0},System.Linq.Expressions.Expression{System.Func{``0,System.Collections.Generic.ICollection{``1}}})">
            <summary>
            Many-to-many relation with an <see cref="T:System.Enum"/>.
            Currently stored as json without any relationship validation.
            </summary>
        </member>
        <member name="T:CoreSharp.EntityFramework.Extensions.IServiceCollectionExtensions">
            <summary>
            <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection"/> extensions.
            </summary>
        </member>
        <member name="M:CoreSharp.EntityFramework.Extensions.IServiceCollectionExtensions.AddRepositories(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <inheritdoc cref="M:CoreSharp.EntityFramework.Extensions.IServiceCollectionExtensions.AddRepositories(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Reflection.Assembly[])" />
        </member>
        <member name="M:CoreSharp.EntityFramework.Extensions.IServiceCollectionExtensions.AddRepositories(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Collections.Generic.IEnumerable{System.Reflection.Assembly})">
            <inheritdoc cref="M:CoreSharp.EntityFramework.Extensions.IServiceCollectionExtensions.AddRepositories(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Reflection.Assembly[])" />
        </member>
        <member name="M:CoreSharp.EntityFramework.Extensions.IServiceCollectionExtensions.AddRepositories(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Reflection.Assembly[])">
            <inheritdoc cref="M:CoreSharp.EntityFramework.Extensions.IServiceCollectionExtensions.AddInterfaces(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type,System.Reflection.Assembly[])" />
        </member>
        <member name="M:CoreSharp.EntityFramework.Extensions.IServiceCollectionExtensions.AddStores(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <inheritdoc cref="M:CoreSharp.EntityFramework.Extensions.IServiceCollectionExtensions.AddStores(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Reflection.Assembly[])" />
        </member>
        <member name="M:CoreSharp.EntityFramework.Extensions.IServiceCollectionExtensions.AddStores(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Collections.Generic.IEnumerable{System.Reflection.Assembly})">
            <inheritdoc cref="M:CoreSharp.EntityFramework.Extensions.IServiceCollectionExtensions.AddStores(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Reflection.Assembly[])" />
        </member>
        <member name="M:CoreSharp.EntityFramework.Extensions.IServiceCollectionExtensions.AddStores(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Reflection.Assembly[])">
            <inheritdoc cref="M:CoreSharp.EntityFramework.Extensions.IServiceCollectionExtensions.AddInterfaces(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type,System.Reflection.Assembly[])" />
        </member>
        <member name="M:CoreSharp.EntityFramework.Extensions.IServiceCollectionExtensions.AddExtendedRepositories(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <inheritdoc cref="M:CoreSharp.EntityFramework.Extensions.IServiceCollectionExtensions.AddExtendedRepositories(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Reflection.Assembly[])" />
        </member>
        <member name="M:CoreSharp.EntityFramework.Extensions.IServiceCollectionExtensions.AddExtendedRepositories(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Collections.Generic.IEnumerable{System.Reflection.Assembly})">
            <inheritdoc cref="M:CoreSharp.EntityFramework.Extensions.IServiceCollectionExtensions.AddExtendedRepositories(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Reflection.Assembly[])" />
        </member>
        <member name="M:CoreSharp.EntityFramework.Extensions.IServiceCollectionExtensions.AddExtendedRepositories(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Reflection.Assembly[])">
            <inheritdoc cref="M:CoreSharp.EntityFramework.Extensions.IServiceCollectionExtensions.AddInterfaces(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type,System.Reflection.Assembly[])" />
        </member>
        <member name="M:CoreSharp.EntityFramework.Extensions.IServiceCollectionExtensions.AddExtendedStores(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <inheritdoc cref="M:CoreSharp.EntityFramework.Extensions.IServiceCollectionExtensions.AddExtendedStores(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Reflection.Assembly[])" />
        </member>
        <member name="M:CoreSharp.EntityFramework.Extensions.IServiceCollectionExtensions.AddExtendedStores(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Collections.Generic.IEnumerable{System.Reflection.Assembly})">
            <inheritdoc cref="M:CoreSharp.EntityFramework.Extensions.IServiceCollectionExtensions.AddExtendedStores(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Reflection.Assembly[])" />
        </member>
        <member name="M:CoreSharp.EntityFramework.Extensions.IServiceCollectionExtensions.AddExtendedStores(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Reflection.Assembly[])">
            <inheritdoc cref="M:CoreSharp.EntityFramework.Extensions.IServiceCollectionExtensions.AddInterfaces(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type,System.Reflection.Assembly[])" />
        </member>
        <member name="M:CoreSharp.EntityFramework.Extensions.IServiceCollectionExtensions.AddInterfaces(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Type,System.Reflection.Assembly[])">
            <summary>
            <para>Register all `interface contract` + `concrete implementation` combos found in given assemblies.</para>
            <para>If single implementation is found, then it is registered regardless.</para>
            <para>If multiple implementations are found, only the one with the `I{Name}Repository` and `{Name}Repository` convention is registered.</para>
            <para>If multiple implementations are found and none has a proper name, then none is registered.</para>
            </summary>
        </member>
        <member name="T:CoreSharp.EntityFramework.Extensions.ModelBuilderExtensions">
            <summary>
            <see cref="T:Microsoft.EntityFrameworkCore.ModelBuilder"/> extensions.
            </summary>
        </member>
        <member name="M:CoreSharp.EntityFramework.Extensions.ModelBuilderExtensions.HasEnum``1(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <inheritdoc cref="M:CoreSharp.EntityFramework.Extensions.ModelBuilderExtensions.HasEnum``1(Microsoft.EntityFrameworkCore.ModelBuilder,System.String)" />
        </member>
        <member name="M:CoreSharp.EntityFramework.Extensions.ModelBuilderExtensions.HasEnum``1(Microsoft.EntityFrameworkCore.ModelBuilder,System.String)">
            <summary>
            Configure and seed <see cref="T:System.Enum"/> to database table.
            </summary>
        </member>
        <member name="M:CoreSharp.EntityFramework.Extensions.ModelBuilderExtensions.ConfigureEnum``1(Microsoft.EntityFrameworkCore.ModelBuilder,System.String)">
            <summary>
            Configure database column type for given <see cref="T:System.Enum"/>.
            </summary>
        </member>
        <member name="M:CoreSharp.EntityFramework.Extensions.ModelBuilderExtensions.SeedEnum``1(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <summary>
            Seed data to database column for given enum <see cref="T:System.Enum"/>.
            </summary>
        </member>
        <member name="T:CoreSharp.EntityFramework.Extensions.PropertyBuilderExtensions">
            <summary>
            <see cref="T:Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder`1"/> extensions.
            </summary>
        </member>
        <member name="M:CoreSharp.EntityFramework.Extensions.PropertyBuilderExtensions.HasJsonConversion``1(Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder{``0})">
            <inheritdoc cref="M:CoreSharp.EntityFramework.Extensions.PropertyBuilderExtensions.HasJsonConversion``1(Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder{``0},Newtonsoft.Json.JsonSerializerSettings)"/>
        </member>
        <member name="M:CoreSharp.EntityFramework.Extensions.PropertyBuilderExtensions.HasJsonConversion``1(Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder{``0},Newtonsoft.Json.JsonSerializerSettings)">
            <summary>
            Convert a property from and to json for database storage.
            </summary>
        </member>
        <member name="M:CoreSharp.EntityFramework.Extensions.PropertyBuilderExtensions.HasUtcConversion(Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder{System.DateTime})">
            <inheritdoc cref="M:CoreSharp.EntityFramework.Extensions.PropertyBuilderExtensions.HasUtcConversion(Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder{System.Nullable{System.DateTime}})" />
        </member>
        <member name="M:CoreSharp.EntityFramework.Extensions.PropertyBuilderExtensions.HasUtcConversion(Microsoft.EntityFrameworkCore.Metadata.Builders.PropertyBuilder{System.Nullable{System.DateTime}})">
            <summary>
            If needed, converts <see cref="T:System.DateTime" /> to UTC from and to database.
            </summary>
        </member>
        <member name="T:CoreSharp.EntityFramework.Models.Concrete.EnumShadowEntity`1">
            <summary>
            <see cref="T:System.Enum"/> shadow entity used for table relationships.
            </summary>
        </member>
        <member name="T:CoreSharp.EntityFramework.Models.Interfaces.IKeyedEntity">
            <summary>
            Interface for entities with primary key.
            </summary>
        </member>
        <member name="T:CoreSharp.EntityFramework.Models.Interfaces.IKeyedEntity`1">
            <inheritdoc />
        </member>
        <member name="T:CoreSharp.EntityFramework.Repositories.Abstracts.UnitOfWorkBase">
            <inheritdoc cref="T:CoreSharp.EntityFramework.Repositories.Interfaces.IUnitOfWork"/>
        </member>
        <member name="T:CoreSharp.EntityFramework.Repositories.Interfaces.IExtendedRepository`1">
            <inheritdoc />
        </member>
        <member name="M:CoreSharp.EntityFramework.Repositories.Interfaces.IExtendedRepository`1.AddAsync(System.Collections.Generic.IEnumerable{`0},System.Threading.CancellationToken)">
            <inheritdoc cref="M:CoreSharp.EntityFramework.Repositories.Interfaces.IRepository`1.AddAsync(`0,System.Threading.CancellationToken)" />
        </member>
        <member name="M:CoreSharp.EntityFramework.Repositories.Interfaces.IExtendedRepository`1.UpdateAsync(System.Collections.Generic.IEnumerable{`0},System.Threading.CancellationToken)">
            <inheritdoc cref="M:CoreSharp.EntityFramework.Repositories.Interfaces.IRepository`1.UpdateAsync(`0,System.Threading.CancellationToken)" />
        </member>
        <member name="M:CoreSharp.EntityFramework.Repositories.Interfaces.IExtendedRepository`1.RemoveAsync(System.Collections.Generic.IEnumerable{`0},System.Threading.CancellationToken)">
            <inheritdoc cref="M:CoreSharp.EntityFramework.Repositories.Interfaces.IRepository`1.RemoveAsync(`0,System.Threading.CancellationToken)" />
        </member>
        <member name="M:CoreSharp.EntityFramework.Repositories.Interfaces.IExtendedRepository`1.RemoveByKeyAsync(System.Object,System.Threading.CancellationToken)">
            <inheritdoc cref="M:CoreSharp.EntityFramework.Repositories.Interfaces.IRepository`1.RemoveAsync(`0,System.Threading.CancellationToken)" />
        </member>
        <member name="M:CoreSharp.EntityFramework.Repositories.Interfaces.IExtendedRepository`1.ExistsAsync(System.Func{System.Linq.IQueryable{`0},System.Linq.IQueryable{`0}},System.Threading.CancellationToken)">
            <summary>
            Check if the subquery returns one or more records.
            </summary>
        </member>
        <member name="M:CoreSharp.EntityFramework.Repositories.Interfaces.IExtendedRepository`1.CountAsync(System.Func{System.Linq.IQueryable{`0},System.Linq.IQueryable{`0}},System.Threading.CancellationToken)">
            <inheritdoc cref="M:Microsoft.EntityFrameworkCore.EntityFrameworkQueryableExtensions.CountAsync``1(System.Linq.IQueryable{``0},System.Threading.CancellationToken)" />
        </member>
        <member name="M:CoreSharp.EntityFramework.Repositories.Interfaces.IExtendedRepository`1.GetPageAsync(System.Int32,System.Int32,System.Func{System.Linq.IQueryable{`0},System.Linq.IQueryable{`0}},System.Threading.CancellationToken)">
            <summary>
            Return paged entity collection.
            </summary>
        </member>
        <member name="T:CoreSharp.EntityFramework.Repositories.Interfaces.IRepository`1">
            <summary>
            Repository interface used for transactional querying.
            Used with <see cref="T:CoreSharp.EntityFramework.Repositories.Interfaces.IUnitOfWork"/> for commiting transactions.
            Suggested implementation base with <see cref="T:CoreSharp.EntityFramework.Repositories.Abstracts.RepositoryBase`1"/>.
            </summary>
            <typeparam name="TEntity">Suggested implementation base with <see cref="T:CoreSharp.EntityFramework.Models.Abstracts.EntityBase`1"/>.</typeparam>
        </member>
        <member name="M:CoreSharp.EntityFramework.Repositories.Interfaces.IRepository`1.GetAsync(System.Object,System.Func{System.Linq.IQueryable{`0},System.Linq.IQueryable{`0}},System.Threading.CancellationToken)">
            <summary>
            Get single entity by given key.
            </summary>
            <param name="key">Primary key to match.</param>
            <param name="navigation">Optional argument to build query.</param>
        </member>
        <member name="M:CoreSharp.EntityFramework.Repositories.Interfaces.IRepository`1.GetAsync(System.Func{System.Linq.IQueryable{`0},System.Linq.IQueryable{`0}},System.Threading.CancellationToken)">
            <summary>
            Get all entities.
            </summary>
            <param name="navigation">Optional argument to build query.</param>
        </member>
        <member name="M:CoreSharp.EntityFramework.Repositories.Interfaces.IRepository`1.AddAsync(`0,System.Threading.CancellationToken)">
            <inheritdoc cref="M:Microsoft.EntityFrameworkCore.DbContext.AddAsync``1(``0,System.Threading.CancellationToken)" />
        </member>
        <member name="M:CoreSharp.EntityFramework.Repositories.Interfaces.IRepository`1.UpdateAsync(`0,System.Threading.CancellationToken)">
            <inheritdoc cref="M:Microsoft.EntityFrameworkCore.DbContext.Update``1(``0)" />
        </member>
        <member name="M:CoreSharp.EntityFramework.Repositories.Interfaces.IRepository`1.RemoveAsync(`0,System.Threading.CancellationToken)">
            <inheritdoc cref="M:Microsoft.EntityFrameworkCore.DbContext.Remove``1(``0)" />
        </member>
        <member name="M:CoreSharp.EntityFramework.Repositories.Interfaces.IUnitOfWork.CommitAsync(System.Threading.CancellationToken)">
            <inheritdoc cref="M:Microsoft.EntityFrameworkCore.DbContext.SaveChangesAsync(System.Threading.CancellationToken)" />
        </member>
        <member name="M:CoreSharp.EntityFramework.Repositories.Interfaces.IUnitOfWork.RollbackAsync(System.Threading.CancellationToken)">
            <inheritdoc cref="M:CoreSharp.EntityFramework.Extensions.DbContextExtensions.RollbackAsync(Microsoft.EntityFrameworkCore.DbContext,System.Threading.CancellationToken)" />
        </member>
        <member name="T:CoreSharp.EntityFramework.Stores.Interfaces.IExtendedStore`1">
            <inheritdoc cref="T:CoreSharp.EntityFramework.Stores.Interfaces.IStore`1" />
        </member>
        <member name="T:CoreSharp.EntityFramework.Stores.Interfaces.IStore`1">
            <summary>
            Store interface used for single entity querying.
            All queries are executed when called without the
            need of commiting, meaning that transactions are
            not supported.
            Suggested implementation base with <see cref="T:CoreSharp.EntityFramework.Stores.Abstracts.StoreBase`1"/>.
            </summary>
            <typeparam name="TEntity">Suggested implementation base with <see cref="T:CoreSharp.EntityFramework.Models.Abstracts.EntityBase`1"/>.</typeparam>
        </member>
    </members>
</doc>
